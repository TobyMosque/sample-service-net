// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TobyMosque.Sample.Service.Net.AuditEntities.Enums;
using TobyMosque.Sample.Service.Net.DataEntities.Enums;
using TobyMosque.Sample.Service.Net.Npgsql;

namespace TobyMosque.Sample.Service.Net.Npgsql.Migrations
{
    [DbContext(typeof(SampleContext))]
    [Migration("20170907202847_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("TobyMosque.Sample.Service.Net.AuditEntities.Domain.AuditType", b =>
                {
                    b.Property<byte>("AuditTypeID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("AuditTypeID");

                    b.ToTable("AuditTypes","domain");
                });

            modelBuilder.Entity("TobyMosque.Sample.Service.Net.AuditEntities.Moviment", b =>
                {
                    b.Property<Guid>("AuditID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AuditDate");

                    b.Property<byte>("AuditTypeID");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("MovimentID");

                    b.Property<byte>("MovimentTypeID");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("ResourceID");

                    b.Property<Guid?>("SessionID");

                    b.Property<int>("TenantID");

                    b.Property<Guid>("UserID");

                    b.HasKey("AuditID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AuditTypeID");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("MovimentID");

                    b.HasIndex("MovimentTypeID");

                    b.HasIndex("ResourceID");

                    b.HasIndex("SessionID");

                    b.HasIndex("UserID");

                    b.HasIndex("TenantID", "AuditDate")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Moviments","audit");
                });

            modelBuilder.Entity("TobyMosque.Sample.Service.Net.AuditEntities.Resource", b =>
                {
                    b.Property<Guid>("AuditID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AuditDate");

                    b.Property<byte>("AuditTypeID");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Observation")
                        .HasMaxLength(250);

                    b.Property<int>("Quantity");

                    b.Property<Guid>("ResourceID");

                    b.Property<Guid?>("SessionID");

                    b.Property<int>("TenantID");

                    b.HasKey("AuditID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AuditTypeID");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ResourceID");

                    b.HasIndex("SessionID");

                    b.HasIndex("TenantID", "AuditDate")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Resources","audit");
                });

            modelBuilder.Entity("TobyMosque.Sample.Service.Net.AuditEntities.User", b =>
                {
                    b.Property<Guid>("AuditID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AuditDate");

                    b.Property<byte>("AuditTypeID");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Logon")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<Guid?>("SessionID");

                    b.Property<int>("TenantID");

                    b.Property<Guid>("UserID");

                    b.HasKey("AuditID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AuditTypeID");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SessionID");

                    b.HasIndex("UserID");

                    b.HasIndex("TenantID", "AuditDate")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Users","audit");
                });

            modelBuilder.Entity("TobyMosque.Sample.Service.Net.DataEntities.Domain.MovimentType", b =>
                {
                    b.Property<byte>("MovimentTypeID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("MovimentTypeID");

                    b.ToTable("MovimentTypes","domain");
                });

            modelBuilder.Entity("TobyMosque.Sample.Service.Net.DataEntities.Moviment", b =>
                {
                    b.Property<Guid>("MovimentID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<byte>("MovimentTypeID");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("ResourceID");

                    b.Property<int>("TenantID");

                    b.Property<Guid>("UserID");

                    b.HasKey("MovimentID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IsDeleted");

                    b.HasIndex("MovimentTypeID");

                    b.HasIndex("ResourceID");

                    b.HasIndex("UserID");

                    b.HasIndex("TenantID", "CreationDate")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Moviments","entity");
                });

            modelBuilder.Entity("TobyMosque.Sample.Service.Net.DataEntities.Resource", b =>
                {
                    b.Property<Guid>("ResourceID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Observation")
                        .HasMaxLength(250);

                    b.Property<int>("Quantity");

                    b.Property<int>("TenantID");

                    b.HasKey("ResourceID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IsDeleted");

                    b.HasIndex("TenantID", "CreationDate")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("TenantID", "Description")
                        .IsUnique();

                    b.ToTable("Resources","entity");
                });

            modelBuilder.Entity("TobyMosque.Sample.Service.Net.DataEntities.Session", b =>
                {
                    b.Property<Guid>("SessionID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsActive");

                    b.Property<int>("TenantID");

                    b.Property<byte[]>("Token")
                        .HasMaxLength(64);

                    b.Property<Guid>("UserID");

                    b.HasKey("SessionID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.HasIndex("TenantID", "CreationDate")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Sessions","entity");
                });

            modelBuilder.Entity("TobyMosque.Sample.Service.Net.DataEntities.Tenant", b =>
                {
                    b.Property<int>("TenantID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("TenantID");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("Tenants","entity");
                });

            modelBuilder.Entity("TobyMosque.Sample.Service.Net.DataEntities.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Logon")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<int>("TenantID");

                    b.HasKey("UserID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IsDeleted");

                    b.HasIndex("TenantID", "CreationDate")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("TenantID", "Logon")
                        .IsUnique();

                    b.ToTable("Users","entity");
                });

            modelBuilder.Entity("TobyMosque.Sample.Service.Net.AuditEntities.Moviment", b =>
                {
                    b.HasOne("TobyMosque.Sample.Service.Net.AuditEntities.Domain.AuditType", "AuditType")
                        .WithMany()
                        .HasForeignKey("AuditTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.Moviment", "Entity")
                        .WithMany("AuditLog")
                        .HasForeignKey("MovimentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.Domain.MovimentType", "MovimentType")
                        .WithMany()
                        .HasForeignKey("MovimentTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TobyMosque.Sample.Service.Net.AuditEntities.Resource", b =>
                {
                    b.HasOne("TobyMosque.Sample.Service.Net.AuditEntities.Domain.AuditType", "AuditType")
                        .WithMany()
                        .HasForeignKey("AuditTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.Resource", "Entity")
                        .WithMany("AuditLog")
                        .HasForeignKey("ResourceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TobyMosque.Sample.Service.Net.AuditEntities.User", b =>
                {
                    b.HasOne("TobyMosque.Sample.Service.Net.AuditEntities.Domain.AuditType", "AuditType")
                        .WithMany()
                        .HasForeignKey("AuditTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.User", "Entity")
                        .WithMany("AuditLog")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TobyMosque.Sample.Service.Net.DataEntities.Moviment", b =>
                {
                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.Domain.MovimentType", "MovimentType")
                        .WithMany()
                        .HasForeignKey("MovimentTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.Resource", "Resource")
                        .WithMany("Moviments")
                        .HasForeignKey("ResourceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.Tenant", "Tenant")
                        .WithMany("Moviments")
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.User", "User")
                        .WithMany("Moviments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TobyMosque.Sample.Service.Net.DataEntities.Resource", b =>
                {
                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.Tenant", "Tenant")
                        .WithMany("Resources")
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TobyMosque.Sample.Service.Net.DataEntities.Session", b =>
                {
                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TobyMosque.Sample.Service.Net.DataEntities.User", b =>
                {
                    b.HasOne("TobyMosque.Sample.Service.Net.DataEntities.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
